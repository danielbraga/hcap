# Generated by Django 3.0.5 on 2020-04-12 03:52

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.managers
import users.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
        ("locations", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Informe o e-mail.",
                        max_length=254,
                        unique=True,
                        verbose_name="E-mail",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Informe o nome completo.",
                        max_length=150,
                        verbose_name="Nome completo",
                    ),
                ),
                (
                    "role",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Nenhum"), (1, "Notificador"), (2, "Gestor local")],
                        default=0,
                        help_text="O usuário é notificador ou gestor?",
                        verbose_name="Papel do usuário",
                    ),
                ),
                (
                    "is_authorized",
                    models.BooleanField(
                        default=False,
                        help_text="Marque para usuários autorizados a operar dentro do seu papel.",
                        verbose_name="Autorizado?",
                    ),
                ),
                (
                    "cpf",
                    models.CharField(
                        help_text="Informe o CPF no formato xxx.xxx.xxx-xx.",
                        max_length=14,
                        unique=True,
                        validators=[users.validators.CPFValidator()],
                        verbose_name="CPF",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        default=53,
                        help_text="É necessário informar o estado.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="users",
                        to="locations.State",
                        verbose_name="Estado",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "ordering": ("name", "email"),
                "abstract": False,
            },
            managers=[("objects", users.managers.UserManager()),],
        ),
    ]
