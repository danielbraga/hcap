# Generated by Django 3.0.5 on 2020-04-09 03:05

import app.validators
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("locations", "0004_auto_20200409_0305"),
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Informe o e-mail.",
                        max_length=254,
                        unique=True,
                        verbose_name="E-mail",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="Informe o nome.", max_length=100, verbose_name="Nome"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="Informe o sobrenome.", max_length=100, verbose_name="Sobrenome"
                    ),
                ),
                (
                    "cpf",
                    models.CharField(
                        help_text="Informe o CPF no formato xxx.xxx.xxx-xx.",
                        max_length=14,
                        unique=True,
                        validators=[app.validators.CPFValidator()],
                        verbose_name="CPF",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        blank=True,
                        help_text="Informe o estado de atuação.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="locations.State",
                        verbose_name="Estado",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={"verbose_name": "user", "verbose_name_plural": "users", "abstract": False,},
            managers=[("objects", django.contrib.auth.models.UserManager()),],
        ),
        migrations.CreateModel(
            name="HealthcareUnity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "cnes_id",
                    models.CharField(
                        max_length=15,
                        validators=[django.core.validators.RegexValidator("[0-9]+")],
                        verbose_name="Registro CNES",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Unidade está ativa?"),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nome do estabelecimento de saúde",
                        max_length=100,
                        verbose_name="Estabelecimento",
                    ),
                ),
                (
                    "municipality",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="healthcare_unities",
                        to="locations.Municipality",
                        verbose_name="Município",
                    ),
                ),
                (
                    "notifiers",
                    models.ManyToManyField(related_name="unities", to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "verbose_name": "Estabelecimento de Saúde",
                "verbose_name_plural": "Estabelecimentos de Saúde",
            },
        ),
        migrations.CreateModel(
            name="LogEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        help_text="De quando é este dado?",
                        verbose_name="Data",
                    ),
                ),
                (
                    "sari_cases_adults",
                    models.PositiveSmallIntegerField(
                        help_text="Informe total de pacientes SRAG", verbose_name="Adulto"
                    ),
                ),
                (
                    "covid_cases_adults",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Destes casos, quantos foram confirmados como COVID?",
                        verbose_name="Casos COVID confirmados",
                    ),
                ),
                (
                    "sari_cases_pediatric",
                    models.PositiveSmallIntegerField(
                        help_text="Informe total de pacientes SRAG", verbose_name="Pediátrico"
                    ),
                ),
                (
                    "covid_cases_pediatric",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Destes casos, quantos foram confirmados como COVID?",
                        verbose_name="Casos COVID confirmados",
                    ),
                ),
                (
                    "icu_sari_cases_adults",
                    models.PositiveSmallIntegerField(
                        help_text="Informe total de pacientes SRAG", verbose_name="Adulto"
                    ),
                ),
                (
                    "icu_covid_cases_adults",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Destes casos, quantos foram confirmados como COVID?",
                        verbose_name="Casos COVID confirmados",
                    ),
                ),
                (
                    "icu_sari_cases_pediatric",
                    models.PositiveSmallIntegerField(
                        help_text="Informe total de pacientes para SRAG", verbose_name="Pediátrico"
                    ),
                ),
                (
                    "icu_covid_cases_pediatric",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Destes casos, quantos foram confirmados como COVID?",
                        verbose_name="Casos COVID confirmados",
                    ),
                ),
                (
                    "regular_cases_adults",
                    models.PositiveSmallIntegerField(
                        help_text="Informe o total de pacientes.", verbose_name="Adulto"
                    ),
                ),
                (
                    "regular_cases_pediatric",
                    models.PositiveSmallIntegerField(
                        help_text="Informe o total de pacientes.", verbose_name="Pediátrico"
                    ),
                ),
                (
                    "regular_icu_adults",
                    models.PositiveSmallIntegerField(
                        help_text="Informe o total de pacientes.", verbose_name="Adulto"
                    ),
                ),
                (
                    "regular_icu_pediatric",
                    models.PositiveSmallIntegerField(
                        help_text="Informe o total de pacientes.", verbose_name="Pediátrico"
                    ),
                ),
                (
                    "unity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.HealthcareUnity"
                    ),
                ),
            ],
            options={"verbose_name": "Informe diário", "verbose_name_plural": "Informes diários",},
        ),
        migrations.CreateModel(
            name="Capacity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        help_text="Quando ocorreu a alteração na capacidade hospitalar?",
                        verbose_name="Data",
                    ),
                ),
                (
                    "beds_adults",
                    models.PositiveSmallIntegerField(
                        help_text="Quantos leitos deste tipo você tem?", verbose_name="Adulto"
                    ),
                ),
                (
                    "beds_pediatric",
                    models.PositiveSmallIntegerField(
                        help_text="Quantos leitos deste tipo você tem?", verbose_name="Pediátrico"
                    ),
                ),
                (
                    "icu_adults",
                    models.PositiveSmallIntegerField(
                        help_text="Quantos leitos deste tipo você tem?", verbose_name="Adulto"
                    ),
                ),
                (
                    "icu_pediatric",
                    models.PositiveSmallIntegerField(
                        help_text="Quantos leitos deste tipo você tem?", verbose_name="Pediátrico"
                    ),
                ),
                (
                    "unity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.HealthcareUnity"
                    ),
                ),
            ],
            options={
                "verbose_name": "Alteração na capacidade",
                "verbose_name_plural": "Alterações de capacidade hospitalar",
            },
        ),
    ]
